{"version":3,"sources":["../node_modules/newregexp/lib/index.js","index.js"],"names":["newRegExp","regexString","expression","flags","test","matches","match","length","substr","RegExp","Object","defineProperty","exports","value","default","ignoreWarnings","type","ignoreMessages","Array","isArray","overloadedConsole","log","console","info","warn","error","args","forEach","ignoreMessage","message","join","slice","indexOf"],"mappings":";AAAA,aAOA,SAASA,EAAUC,GACbC,IAAAA,EAAaD,EACbE,EAAQ,GAER,GAAA,iBAAiBC,KAAKH,GAAc,CAClCI,IAAAA,EAAUJ,EAAYK,MAAM,cAAgB,GAChDH,GAASE,EAAQE,OAASF,EAAQ,GAAK,KAAKG,OAAO,GAE/CF,IAAAA,GADJD,EAAUJ,EAAYK,MAAM,YAAc,IACtBC,OAASF,EAAQ,GAAK,KAC1CH,EAAaI,EAAME,OAAO,EAAGF,EAAMC,OAAS,GAGvC,OAAA,IAAIE,OAAOP,EAAYC,GAjBhCO,OAAOC,eAAeC,QAAS,aAAc,CAC3CC,OAAO,IAETD,QAAQE,QAAUd;;ACwBjB,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,QAAA,EA7BD,IAAA,EAAA,EAAA,QAAA,cA6BC,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GA3Bc,SAASe,EAAeC,EAAMC,GACtCA,IACHA,EAAiBD,EACjBA,EAAO,QAEJE,MAAMC,QAAQF,KAAiBA,EAAiB,CAACA,IAChDG,IAAAA,EAAoB,CACxBC,IAAKC,QAAQD,IACbE,KAAMD,QAAQC,KACdC,KAAMF,QAAQE,KACdC,MAAOH,QAAQG,OAEjBH,QAAQN,GAAQ,WAAIU,IAAAA,IAAAA,EAAAA,UAAAA,OAAAA,EAAS,IAAA,MAAA,GAAA,EAAA,EAAA,EAAA,EAAA,IAATA,EAAS,GAAA,UAAA,GACvBL,IAAAA,GAAM,EACVJ,EAAeU,QAAQ,SAAAC,GACfC,IAAAA,EAAUH,EAAKI,KAAK,KAAKC,MAAM,GAAI,GACrC,iBAAiB3B,KAAKwB,IACV,EAAUA,EAAAA,SAAAA,GACdxB,KAAKyB,KAAUR,GAAM,GACtBQ,EAAQG,QAAQJ,IAAkB,IAC3CP,GAAM,GAEJ,QAACA,IAGHA,GAAKD,EAAkBJ,GAAlBI,MAAAA,EAA2BM","file":"index.map","sourceRoot":"../src","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = newRegExp;\n\nfunction newRegExp(regexString) {\n  var expression = regexString;\n  var flags = '';\n\n  if (/^\\/.*\\/[a-z]*$/.test(regexString)) {\n    var matches = regexString.match(/\\/[a-z]*$/) || [];\n    flags = (matches.length ? matches[0] : '/').substr(1);\n    matches = regexString.match(/^\\/.*\\//) || [];\n    var match = matches.length ? matches[0] : '//';\n    expression = match.substr(1, match.length - 2);\n  }\n\n  return new RegExp(expression, flags);\n}","import newRegExp from 'newregexp';\n\nexport default function ignoreWarnings(type, ignoreMessages) {\n  if (!ignoreMessages) {\n    ignoreMessages = type;\n    type = 'warn';\n  }\n  if (!Array.isArray(ignoreMessages)) ignoreMessages = [ignoreMessages];\n  const overloadedConsole = {\n    log: console.log,\n    info: console.info,\n    warn: console.warn,\n    error: console.error\n  };\n  console[type] = (...args) => {\n    let log = true;\n    ignoreMessages.forEach(ignoreMessage => {\n      const message = args.join(' ').slice(0, -1);\n      if (/^\\/.*\\/[a-z]*$/.test(ignoreMessage)) {\n        const regex = newRegExp(ignoreMessage);\n        if (regex.test(message)) log = false;\n      } else if (message.indexOf(ignoreMessage) > -1) {\n        log = false;\n      }\n      if (!log) return false;\n      return true;\n    });\n    if (log) overloadedConsole[type](...args);\n  };\n}\n"]}